import bpy
import csv

def read_csv(file_path):
    with open(file_path,'r') as f:
        reader=csv.reader(f)
        data=list(reader)
        return(data)

def translate(value, leftMin, leftMax, rightMin, rightMax):
    # Figure out how 'wide' each range is
    leftSpan = leftMax - leftMin
    rightSpan = rightMax - rightMin

    # Convert the left range into a 0-1 range (float)
    valueScaled = (value - leftMin) / leftSpan

    # Convert the 0-1 range into a value in the right range.
    return rightMin + (valueScaled * rightSpan)

################
# Read in file
################

file_in = "/Users/apple/Desktop/Master Project/r-graphing/data/squirrel_hectar_date.csv"
hectar = read_csv(file_in)

# ['', 'X', 'Y', 'Above.Ground', 'Color', 'Hectar.Number', 'Date']


context = bpy.context
scene = context.scene

#####################
# Set material
#####################

gray = bpy.data.materials.get('Gray_material')
gray.use_nodes = True

black = bpy.data.materials.get('Black_material')
black.use_nodes = True

cinnamon = bpy.data.materials.get('Cinnamon_material')
cinnamon.use_nodes = True

print(hectar[0])

#####################
# Add objects
#####################

#bpy.ops.mesh.primitive_uv_sphere_add(enter_editmode=False, align='WORLD', location=(-5, 0, 20), scale=(0.5, 0.5, 0.5))
#bpy.context.object.data.materials.append(gray)
#gray_sphere = bpy.context.object
#g_C = bpy.context.object

#cube = scene.objects.get("gray_sphere")



for i in range(1, len(hectar)):
    
    # translate X to x [0,40]
    x = translate(float(hectar[i][1]), -73.982, -73.95, 0, 40)
    # translate Y to y [0,40[
    y = translate(float(hectar[i][2]), 40.764, 40.801, 0, 40)
    # translate hectar number to z
    z = translate(int(hectar[i][5]), 0, 23, 0, 40)
    
    if hectar[i][4] == "999999":
        bpy.data.objects.get("gray_sphere")
        bpy.context.scene.objects["gray_sphere"]
        bpy.ops.object.duplicate(linked = True)
        
#        bpy.ops.object.duplicate_move_linked(OBJECT_OT_duplicate={"linked":True, "mode":'TRANSLATION'}, TRANSFORM_OT_translate={"value":(x, y, z), "orient_axis_ortho":'X', "orient_type":'GLOBAL', "orient_matrix":((1, 0, 0), (0, 1, 0), (0, 0, 1)), "orient_matrix_type":'GLOBAL', "constraint_axis":(False, False, False), "mirror":False, "use_proportional_edit":False, "proportional_edit_falloff":'SMOOTH', "proportional_size":1, "use_proportional_connected":False, "use_proportional_projected":False, "snap":False, "snap_elements":{'INCREMENT'}, "use_snap_project":False, "snap_target":'CLOSEST', "use_snap_self":True, "use_snap_edit":True, "use_snap_nonedit":True, "use_snap_selectable":False, "snap_point":(0, 0, 0), "snap_align":False, "snap_normal":(0, 0, 0), "gpencil_strokes":False, "cursor_transform":False, "texture_space":False, "remove_on_cancel":False, "view2d_edge_pan":False, "release_confirm":False, "use_accurate":False, "use_automerge_and_split":False})

#        bpy.context.object.location = (x,y,z)
#        g_C.collection.objects.link(new_obj)
#        scene.objects.active = cube
#        # dupe it
#        bpy.ops.object.duplicate(linked=True)
        
        bpy.context.object.location = (x,y,z)
#    bpy.ops.mesh.primitive_uv_sphere_add(enter_editmode=False, align='WORLD', location=(x, y, z), scale=(0.5, 0.5, 0.5))

print("finished")
    
    
    
    
